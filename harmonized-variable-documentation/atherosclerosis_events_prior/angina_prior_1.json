{
  "name": "angina_prior_1",
  "phenotype_concept": "angina_prior",
  "concept_variant": 1,
  "description": "An indicator of whether a subject had an angina event prior to the baseline visit.",
  "version": 1,
  "dcc_harmonization_id": 162,
  "data_type": "encoded",
  "measurement_units": "angina_prior",
  "has_age_variable": true,
  "date_harmonized": "2019-10-31 16:33:19",
  "dcc_harmonization_comments": "This variable was harmonized by appropriately converting component variables to a binary variable indicating the occurrence of angina before the baseline visit. Component variables included could indicate occurrence of angina either by self-report or by study adjudication. If a study recorded multiple events, the DCC harmonized only the earliest event prior to baseline. Unless otherwise stated, the age variable accompanying this variable represents the study participants' age when history of angina was recorded, _not_ the age at which angina occurred.\n\n### Study-specific comments\n\n#### FHS\n\nThe age variable accompanying this variable represents the age at which the angina occurred, not the age when the history of angina was recorded. \n\n### Reporting method for component study variables\n\nThe table below shows the reporting method (self-reported or adjudicated by the study) for component study variables from each study included in this harmonized variable.\n\n| Study or subcohort | Self-report or Adjudicated|\n|---------|----------|\n| FHS | Adjudicated|\n| MESA | Self-report |\n| CHS | Both |\n| COPDGene | Self-report |\n| WHI | Self-report |\n\n",
  "encoded_values": [
    {
      "code": "0",
      "value": "Did not have a history of angina before baseline"
    },
    {
      "code": "1",
      "value": "Had a history of angina before baseline"
    }
  ],
  "controlled_vocabulary": [
    {
      "source": "UMLS",
      "version": "2019AA",
      "id": "C0002962"
    }
  ],
  "harmonization_units": [
    {
      "name": "CHS",
      "component_study_variables": ["phs000287.v6.pht001452.v1.phv00100487.v1", "phs000287.v6.pht001452.v1.phv00100504.v1"],
      "component_harmonized_variables": [],
      "harmonization_function": "harmonize <- function(phen_list){\n  # Convert age to numeric and rename angina variable.\n  dat <- transmute(phen_list$source_data$pht001452, topmed_subject_id, age = as.numeric(AGEBL),\n                   angina_prior = ANBLMOD) %>%\n    # Exclude rows with missing data.\n    na.omit()\n  return(dat)\n}\n"
    },
    {
      "name": "COPDGene",
      "component_study_variables": ["phs000179.v5.pht002239.v4.phv00159608.v4", "phs000179.v5.pht002239.v4.phv00159836.v4"],
      "component_harmonized_variables": [],
      "harmonization_function": "harmonize <- function(phen_list){\n  library(dplyr)\n  library(magrittr)\n\n  dataset <- phen_list$source_data$pht002239 %>%\n    rename(age = Age_Enroll, angina_prior = Angina )\n\n  # Convert angina_prior to character, age to numeric.\n  dataset$angina_prior <- as.character(dataset$angina_prior)\n  dataset$age <- as.numeric(dataset$age)\n\n  # Remove NAs.\n  dataset <- na.omit(dataset)\n\n  return(dataset)\n}\n"
    },
    {
      "name": "FHS",
      "component_study_variables": ["phs000007.v30.pht000309.v13.phv00036469.v12", "phs000007.v30.pht000309.v13.phv00036471.v12", "phs000007.v30.pht003099.v5.phv00177930.v5", "phs000007.v30.pht003316.v7.phv00190817.v7", "phs000007.v30.pht003316.v7.phv00190823.v7"],
      "component_harmonized_variables": [],
      "harmonization_function": "harmonize <- function(phen_list){\n    library(dplyr)\n    source_data <- phen_list$source_data\n\n    # Join datasets.\n    dat <- full_join(source_data$pht003099, source_data$pht000309, by = \"topmed_subject_id\") %>%\n\n      # Convert age to numeric.\n      transmute(topmed_subject_id,\n                cad_followup_start_age = as.numeric(age1),\n                event = as.numeric(EVENT),\n                date = as.numeric(DATE))\n\n    # Create mi_prior variable. Gather all mi events.\n    dat$angina_prior <- replicate(length(dat$event), 0)\n    dat$angina_prior  <- case_when(\n      dat$event == 6 ~ 1,\n      dat$event != 6 ~ 0,\n      is.na(dat$event) ~ NA_real_\n    )\n\n    # Calculate age at event.\n    dat$age_at_event <- replicate(length(dat$event), 0)\n    dat$age_at_event <- floor(dat$cad_followup_start_age + (dat$date / 365.25))\n\n    # Identify prior angina events.\n    dat <- dat %>%\n      mutate(angina_prior = case_when(angina_prior == 1 & date <= 0 ~ 1,\n                                     angina_prior == 1 & date > 0 ~ 0,\n                                     TRUE ~ angina_prior))\n  # Find subjects with multiple angina events and select first angina event.\n    angina_event <- dat %>%\n      filter(angina_prior == 1) %>%\n      arrange(topmed_subject_id, date) %>%\n      distinct(topmed_subject_id, .keep_all = TRUE) %>%\n      select(-event)\n\n    # Gather all non-angina-event subjects.\n    non_angina_event <- dat %>%\n      filter(angina_prior == 0) %>%\n      select(-event)\n\n    # Gather all non-event subjects from surv dataset.\n    dat2 <- full_join(source_data$pht003099, source_data$pht003316, by = \"topmed_subject_id\") %>%\n      transmute(topmed_subject_id,\n                cad_followup_start_age = as.numeric(age1),\n                cvd_status = as.numeric(cvd),\n                date = as.numeric(cvddate))\n\n    # Create a non-event specific dataset and remove duplicates.\n    non_event <- dat2 %>%\n      filter(cvd_status == 0) %>%\n      arrange(topmed_subject_id, desc(date)) %>%\n      distinct(topmed_subject_id, .keep_all = TRUE) %>%\n      select(-cvd_status)\n\n    # Create an angina_prior variable for non-event subjects.\n    non_event$angina_prior <- 0\n\n    # Create an age at censoring variable for non-event subjects.\n    non_event$age_at_event <-\n      non_event$cad_followup_start_age + (non_event$date / 365.25)\n\n    # Bind non_event and non_angina_event datasets and remove duplicates.\n    non_event_all <- rbind(non_event, non_angina_event) %>%\n      arrange(topmed_subject_id, desc(date)) %>%\n      distinct(topmed_subject_id, .keep_all = TRUE)\n\n    # Combine all angina-event subjects with non-angina-event subjects.\n    dat_combined <- bind_rows(angina_event, non_event_all) %>%\n      arrange(topmed_subject_id, desc(angina_prior)) %>%\n\n      # Remove duplicate subjects with multiple events.\n      distinct(topmed_subject_id, .keep_all = TRUE) %>%\n      transmute(topmed_subject_id,\n                angina_prior = as.character(angina_prior),\n                age = age_at_event) %>%\n      na.omit()\n\n    return(dat_combined)\n}\n"
    },
    {
      "name": "MESA",
      "component_study_variables": ["phs000209.v13.pht001116.v10.phv00084442.v3"],
      "component_harmonized_variables": [],
      "harmonization_function": "harmonize <- function(phen_list){\n  # Convert age to numeric and set all participants to 0.\n  dat <- transmute(phen_list$source_data$pht001116, topmed_subject_id, age = as.numeric(age1c),\n                   angina_prior = \"0\")\n  return(dat)\n}\n"
    },
    {
      "name": "WHI",
      "component_study_variables": ["phs000200.v11.pht000998.v6.phv00078436.v6", "phs000200.v11.pht000998.v6.phv00078437.v6", "phs000200.v11.pht000999.v6.phv00078507.v6", "phs000200.v11.pht000999.v6.phv00078560.v6"],
      "component_harmonized_variables": [],
      "harmonization_function": "harmonize <- function(phen_list){\n  source_data <- phen_list$source_data\n  # Join Form 2 data with Form 30 data\n  dat <- full_join(source_data$pht000998, source_data$pht000999, \"topmed_subject_id\") %>%\n    # Set positive F2DAYS values to 0.\n    mutate_at(vars(F2DAYS), function(x) case_when(x > 0 ~ 0, TRUE ~ as.numeric(x))) %>%\n    # Calculate age, rename angina variable, and drop remaining variables.\n    transmute(age = as.numeric(AGE) + (as.numeric(F30DAYS) + abs(F2DAYS)) / 365.25,\n              angina_prior = ANGINA, topmed_subject_id) %>%\n    # Exclude rows with missing data.\n    na.omit()\n  return(dat)\n}\n"
    }
  ]
}
